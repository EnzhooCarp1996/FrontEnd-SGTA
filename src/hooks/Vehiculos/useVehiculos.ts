import { Vehiculo, NewVehiculo } from "../../types";
import { useEffect, useState } from "react";
import {
  createVehiculo,
  getVehiculos,
  updateVehiculo,
  deleteVehiculo,
} from "../../Services/VehiculoService";
import { useAuth } from "../useAuth";

export function useVehiculos() {
  const { token } = useAuth();
  const [vehiculos, setVehiculos] = useState<Vehiculo[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!token) return;

    getVehiculos(token)
      .then((data) => setVehiculos(data))
      .catch((err) => setError(err.message));
  }, [token]);

  // -------------------------------
  // CREATE
  // -------------------------------

  const agregarVehiculo = async (newVehiculo: NewVehiculo) => {
    if (!token) return;

    try {
      const vehiculoCreado = await createVehiculo(token, newVehiculo);
      setVehiculos((prev) => [...prev, vehiculoCreado]);
      alert(`üöó ¬°Agregado correctamente!\n ‚úÖVehiculo:
        ${newVehiculo.marca}
        ${newVehiculo.modelo}
        ${newVehiculo.nroDeChasis}
        ${newVehiculo.patente}`);
      return vehiculoCreado;
    } catch (err: unknown) {
      if (err instanceof Error) {
        alert("‚ùå Error al crear el veh√≠culo: " + err.message);
      } else {
        alert("‚ùå Error desconocido al crear el veh√≠culo");
      }
      throw err;
    }
  };

  // -------------------------------
  // UPDATE
  // -------------------------------
  const modificarVehiculo = async (vehiculoActualizado: Vehiculo) => {
    if (!token) return;

    try {
      const vehiculo = await updateVehiculo(token, vehiculoActualizado);
      setVehiculos((prev) =>
        prev.map((v) => (v.idVehiculo === vehiculo.idVehiculo ? vehiculo : v))
      );
      alert(
        `‚úèÔ∏è Veh√≠culo: ${vehiculoActualizado.patente} actualizado correctamente ‚úÖ`
      );
      return vehiculo;
    } catch (err: unknown) {
      if (err instanceof Error) {
        alert("‚ùå Error al actualizar el veh√≠culo: " + err.message);
      } else {
        alert("‚ùå Error desconocido al actualizar el veh√≠culo");
      }
      throw err;
    }
  };

  const eliminarVehiculo = async (id: number) => {
    if (!token) return;

    const confirmar = window.confirm(
      "‚ö†Ô∏è ¬øEst√°s seguro de eliminar este veh√≠culo?"
    );
    if (!confirmar) return;

    try {
      await deleteVehiculo(token, id);
      setVehiculos((prev) => prev.filter((v) => v.idVehiculo !== id));
      alert("Veh√≠culo eliminado correctamente ‚úÖ");
    } catch (err: unknown) {
      if (err instanceof Error) {
        alert("‚ùå Error al eliminar el veh√≠culo: " + err.message);
      } else {
        alert("‚ùå Error desconocido al eliminar el veh√≠culo");
      }
    }
  };

  return {
    vehiculos,
    error,
    agregarVehiculo,
    modificarVehiculo,
    eliminarVehiculo,
  };
}
